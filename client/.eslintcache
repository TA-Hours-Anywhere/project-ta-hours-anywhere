[{"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/index.js":"1","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/App.js":"2","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/reportWebVitals.js":"3","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/RegisterStudent.js":"4","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/ApolloProvider.js":"5","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/Home.js":"6","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/LoginStudent.js":"7","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/context/auth.js":"8","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/util/DynamicRoute.js":"9","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/RegisterInstructor.js":"10","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/LoginInstructor.js":"11","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/MainStudent.js":"12","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentChat.js":"13","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/student-chats/StudentMatches.js":"14","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/context/messages.js":"15","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/student-chats/StudentMessages.js":"16","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/Message.js":"17","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentProfile.js":"18","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentMatchPopup.js":"19","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/MainInstructor.js":"20","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorProfile.js":"21","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorChat.js":"22","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/instructor-chats/InstructorMatches.js":"23","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/instructor-chats/InstructorMessages.js":"24","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentHome.js":"25","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorHome.js":"26"},{"size":457,"mtime":1609543228182,"results":"27","hashOfConfig":"28"},{"size":1643,"mtime":1609658311088,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1609295947466,"results":"30","hashOfConfig":"28"},{"size":3966,"mtime":1609663192749,"results":"31","hashOfConfig":"28"},{"size":1664,"mtime":1609580300268,"results":"32","hashOfConfig":"28"},{"size":1368,"mtime":1609582310723,"results":"33","hashOfConfig":"28"},{"size":3112,"mtime":1609581122630,"results":"34","hashOfConfig":"28"},{"size":1745,"mtime":1609411755444,"results":"35","hashOfConfig":"28"},{"size":1062,"mtime":1609494219301,"results":"36","hashOfConfig":"28"},{"size":4002,"mtime":1609663224133,"results":"37","hashOfConfig":"28"},{"size":3136,"mtime":1609588352094,"results":"38","hashOfConfig":"28"},{"size":2896,"mtime":1609659011691,"results":"39","hashOfConfig":"28"},{"size":2171,"mtime":1609656211417,"results":"40","hashOfConfig":"28"},{"size":2572,"mtime":1609588228642,"results":"41","hashOfConfig":"28"},{"size":4166,"mtime":1609657140554,"results":"42","hashOfConfig":"28"},{"size":4362,"mtime":1609655365152,"results":"43","hashOfConfig":"28"},{"size":3749,"mtime":1609670449824,"results":"44","hashOfConfig":"28"},{"size":491,"mtime":1609582700741,"results":"45","hashOfConfig":"28"},{"size":1352,"mtime":1609589924863,"results":"46","hashOfConfig":"28"},{"size":1623,"mtime":1609663054714,"results":"47","hashOfConfig":"28"},{"size":494,"mtime":1609658698987,"results":"48","hashOfConfig":"28"},{"size":2198,"mtime":1609658196377,"results":"49","hashOfConfig":"28"},{"size":2673,"mtime":1609662391954,"results":"50","hashOfConfig":"28"},{"size":4414,"mtime":1609662996765,"results":"51","hashOfConfig":"28"},{"size":535,"mtime":1609659013618,"results":"52","hashOfConfig":"28"},{"size":548,"mtime":1609659067553,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"ekrpco",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/index.js",[],["112","113"],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/App.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/reportWebVitals.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/RegisterStudent.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/ApolloProvider.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/Home.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/LoginStudent.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/context/auth.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/util/DynamicRoute.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/RegisterInstructor.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/LoginInstructor.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/MainStudent.js",["114"],"import React, { useState } from 'react'\nimport '../../App.scss';\nimport { Container, Row, Button } from 'react-bootstrap'\nimport StudentChat from './StudentChat'\nimport StudentProfile from './StudentProfile'\nimport StudentHome from './StudentHome'\nimport StudentMatchPopup from './StudentMatchPopup';\n\nimport { useAuthDispatch } from '../../context/auth';\n\nimport { gql, useMutation } from '@apollo/client'\n\n\n\n// --------------REFACTOR THE MATCH CODE SOMEWHERE ELSE, HERE RN AS A PROTOTYPE-------------- // \n\n// gql mutation to match with an instructor\nconst MATCH = gql`\n    mutation match {\n        match{\n            username email createdAt matches\n        }\n    }\n`\n\n// ------------------------------------------------------------------------------------------//\n\nexport default function MainStudent({ history }) {\n    // auth context \n    const dispatch = useAuthDispatch()\n\n    // state for conditional rendering, set to chats on login\n    const [selectedPage, setSelectedPage] = useState('Chats')\n\n    \n\n    // on logout\n    const logout = () => {\n        dispatch({ type: 'LOGOUT' })\n        window.location.href = '/login-student'\n    }\n    \n    // --------------REFACTOR THE MATCH CODE SOMEWHERE ELSE, HERE RN AS A PROTOTYPE-------------- // \n\n    // state for match info\n    const [matchedUser, setMatchedUser] = useState('')\n\n    const[show, setPopup] = useState(false)\n\n    const setMatchInfo = (data) => {\n        console.log(data)\n        data ? setMatchedUser(data.username) : setMatchedUser('')\n        setPopup(true)\n    }\n\n    const [match, { data }] = useMutation(MATCH, {\n        onCompleted: (data) => setMatchInfo(data.match),\n        onError: err => {\n            console.log(err)\n            setMatchInfo(null)\n        }\n    })\n\n    // ------------------------------------------------------------------------------------------//\n\n    return (\n            <Container className=\"pt-0\">\n                <Row className=\"pt-2 bg-white justify-content-around pb-2 mb-2\">\n                        <Button variant=\"link\" size=\"lg\" onClick={match}> {'\\u2728'} Match me! {'\\u2728'} </Button>\n                        <Button variant=\"link\" size=\"lg\" onClick={() => setSelectedPage('Home')}> My Home </Button>\n                        <Button variant=\"link\" size=\"lg\" onClick={() => setSelectedPage('Chats')}> My Chats </Button>\n                        <Button variant=\"link\" size=\"lg\" onClick={() => setSelectedPage('Profile')}> My Profile </Button>\n                        <Button variant=\"link\" size=\"lg\" onClick={logout}> Logout </Button>\n                </Row>\n                <StudentMatchPopup show={show} setPopup={setPopup} username={matchedUser}/>\n                {selectedPage === 'Chats' && <StudentChat /> }\n                {selectedPage === 'Profile' && <StudentProfile /> }\n                {selectedPage === 'Home' && <StudentHome /> }\n            </Container>\n    )\n}\n","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentChat.js",["115","116"],"import React, { useEffect } from 'react'\nimport { Row } from 'react-bootstrap'\nimport '../../App.scss';\nimport { gql, useSubscription } from '@apollo/client'\n\nimport StudentMatches from './student-chats/StudentMatches';\nimport StudentMessages from './student-chats/StudentMessages';\n\nimport { useMessageDispatch } from '../../context/messages'\nimport { useAuthState } from '../../context/auth';\n\nconst NEW_MESSAGE = gql`\n    subscription newMessage{\n        newMessage{\n            uuid from to content createdAt\n        }\n    }\n`\n\nconst NEW_REACTION = gql`\n    subscription newReaction{\n        newReaction{\n            uuid content \n            message {\n                uuid from to\n            }\n        }\n    }\n`\n\n\nexport default function MainStudent() {\n    const dispatch = useMessageDispatch()\n    const { user } = useAuthState()\n\n    const { data: messageData, error: messageError } = useSubscription(NEW_MESSAGE)\n\n    const { data: reactionData, error: reactionError } = useSubscription(NEW_REACTION)\n\n    useEffect(() => {\n        if (messageError) console.log(messageError)\n\n        if (messageData) {\n            const message = messageData.newMessage\n            // otherUser is either the to or from of the message\n            const otherUser = user.username === message.to ? message.from : message.to\n\n            dispatch({ type: 'ADD_MESSAGE', payload: {\n                username: otherUser,\n                message: message\n            }})\n        }\n    }, [messageError, messageData])\n\n    useEffect(() => {\n        if (reactionError) console.log(reactionError)\n\n        if (reactionData) {\n            const reaction = reactionData.newReaction\n            // otherUser is either the to or from of the message\n            const otherUser = user.username === reaction.message.to ? reaction.message.from : reaction.message.to\n\n            dispatch({ type: 'ADD_REACTION', payload: {\n                username: otherUser,\n                reaction\n            }})\n        }\n    }, [reactionError, reactionData])\n    \n\n    return (\n        <Row className=\"bg-white\" > \n            <StudentMatches /> \n            <StudentMessages />\n\n        </Row>\n    )\n}\n","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/student-chats/StudentMatches.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/context/messages.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/student-chats/StudentMessages.js",["117","118"],"import React, { useEffect, Fragment, useState } from 'react'\nimport {  Col, Form } from 'react-bootstrap'\nimport '../../../App.scss';\nimport { gql,  useLazyQuery, useMutation } from '@apollo/client'\nimport Message from '../../Message'\n\nimport { useMessageDispatch, useMessageState } from '../../../context/messages'\n\n// gql query to get all messages from a certain user\nconst GET_MESSAGES = gql`\n    query getMessages($from: String!){\n        getMessages(from: $from){\n            uuid from to content createdAt\n            reactions{\n                uuid\n                content\n            }\n        }\n    }\n`\n\n// gql mutation to send a message \nconst SEND_MESSAGE = gql`\n    mutation sendMessage($to: String!, $content: String!) {\n        sendMessage(to: $to, content: $content) {\n            uuid from to content createdAt\n        }\n    }\n`\n\nexport default function StudentMessages() {\n    // context for messages\n    const dispatch = useMessageDispatch()\n    const { users } = useMessageState()\n    const [content, setContent] = useState('')\n\n    // find selected user and their messages\n    const selected = users?.find(u => u.selected === true)\n    const messages = selected?.messages\n\n    // get existing messages from user, call query\n    const [getMessages, { loading: messagesLoading, data: messagesData}] = useLazyQuery(GET_MESSAGES)\n\n    // grab messages from selected user\n    useEffect(() => {\n        if (selected && !selected.messages) {\n            getMessages({ variables: { from: selected.username }})\n        }\n    }, [selected])\n\n    // if we got messages\n    useEffect(() => {\n        if (messagesData) {\n            dispatch({type: 'SET_USER_MESSAGES', payload: {\n                username: selected.username,\n                messages: messagesData.getMessages\n            }})\n        }\n    }, [messagesData])\n\n    // call mutation to send message, message will be retrived from context in StudentChat component\n    const [sendMessage] = useMutation(SEND_MESSAGE, {\n        onError: err => console.log(err)\n    })\n\n    // submit message form handler\n    const submitMessage = e => {\n        e.preventDefault()\n        setContent('')\n        // validation\n        if (content.trim() === '' || !selected) return\n\n        // mutation for sending the message\n        sendMessage({ variables: { to: selected.username, content }})\n    }\n\n    let selectedChatMarkup\n    if (messagesLoading){\n        selectedChatMarkup = <p className=\"default-info\"> Loading ... </p>\n    } else if (!messages && !messagesLoading) {\n        selectedChatMarkup = <p className=\"default-display\"> \n        Welcome to your chats page!  \n        <br/> <br/> Select an instructor from your matched list \n        <br/> on the left to start chatting! \n        <br/> <br/> Click the {'\\u2728'} Match Me! {'\\u2728'} button in the top left\n        <br/> to be matched with an instructor! </p>\n    } else if (messages.length > 0) {\n        selectedChatMarkup = messages.map((message, index) => (\n            <Fragment key={message.uuid} > \n                <Message message={message}/>\n                {index === messages.length - 1 && (\n                    <div className=\"invisible\">\n                        <hr className=\"m-0\"/> \n                    </div>\n                )}\n            </Fragment>\n        ))\n    } else if (messages.length === 0) {\n        selectedChatMarkup = <p className=\"default-info\"> You are now connected! Reach out to your instructor! </p>\n    }\n    return (\n    <Col xs={10} md={8} className=\"p-0\">\n        <div className=\"messages-box d-flex flex-column-reverse p-3\">\n            {selectedChatMarkup}\n        </div>\n         <div className=\"pt-3 px-3 py-2\">\n            <Form onSubmit={submitMessage}> \n                    <Form.Group className=\"d-flex align-items-center m-1\">\n                        <Form.Control\n                            type=\"text\"\n                            className=\"rounded-pill bg-secondary border-0 msg-input p-4\"\n                            placeholder=\"Type a message...\"\n                            value={content}\n                            onChange={e => setContent(e.target.value)}/> \n                            <i className=\"fas fa-paper-plane fa-2x text-primary ml-2\" role=\"button\" onClick={submitMessage}></i>\n                    </Form.Group>\n                </Form>\n        </div> \n    </Col>\n    )\n}\n","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/Message.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentProfile.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentMatchPopup.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/MainInstructor.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorProfile.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorChat.js",["119","120"],"import React, { useEffect } from 'react'\nimport { Row } from 'react-bootstrap'\nimport '../../App.scss';\nimport { gql, useSubscription } from '@apollo/client'\n\nimport InstructorMatches from './instructor-chats/InstructorMatches';\nimport InstructorMessages from './instructor-chats/InstructorMessages';\n\nimport { useMessageDispatch } from '../../context/messages'\nimport { useAuthState } from '../../context/auth';\n\nconst NEW_MESSAGE = gql`\n    subscription newMessage{\n        newMessage{\n            uuid from to content createdAt\n        }\n    }\n`\n\nconst NEW_REACTION = gql`\n    subscription newReaction{\n        newReaction{\n            uuid content \n            message {\n                uuid from to\n            }\n        }\n    }\n`\n\n\nexport default function MainInstructor() {\n    const dispatch = useMessageDispatch()\n    const { user } = useAuthState()\n\n    const { data: messageData, error: messageError } = useSubscription(NEW_MESSAGE)\n\n    const { data: reactionData, error: reactionError } = useSubscription(NEW_REACTION)\n\n    useEffect(() => {\n        if (messageError) console.log(messageError)\n\n        if (messageData) {\n            const message = messageData.newMessage\n            // otherUser is either the to or from of the message\n            const otherUser = user.username === message.to ? message.from : message.to\n\n            dispatch({ type: 'ADD_MESSAGE', payload: {\n                username: otherUser,\n                message: message\n            }})\n        }\n    }, [messageError, messageData])\n\n    useEffect(() => {\n        if (reactionError) console.log(reactionError)\n\n        if (reactionData) {\n            const reaction = reactionData.newReaction\n            // otherUser is either the to or from of the message\n            const otherUser = user.username === reaction.message.to ? reaction.message.from : reaction.message.to\n\n            dispatch({ type: 'ADD_REACTION', payload: {\n                username: otherUser,\n                reaction\n            }})\n        }\n    }, [reactionError, reactionData])\n    \n\n    return (\n        <Row className=\"bg-white\" > \n            <InstructorMatches /> \n            <InstructorMessages />\n\n        </Row>\n    )\n}\n","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/instructor-chats/InstructorMatches.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/instructor-chats/InstructorMessages.js",["121","122"],"import React, { useEffect, Fragment, useState } from 'react'\nimport {  Col, Form } from 'react-bootstrap'\nimport '../../../App.scss';\nimport { gql,  useLazyQuery, useMutation } from '@apollo/client'\nimport Message from '../../Message'\n\nimport { useMessageDispatch, useMessageState } from '../../../context/messages'\n\n// ----------------------CODE HERE IS MOSTLY COPIED FROM STUDENT PAGE, CAN DEF REFACTOR THIS---------------------//\n\n// gql query to get all messages from a certain user\nconst GET_MESSAGES = gql`\n    query getMessages($from: String!){\n        getMessages(from: $from){\n            uuid from to content createdAt\n            reactions{\n                uuid\n                content\n            }\n        }\n    }\n`\n\n// gql mutation to send a message \nconst SEND_MESSAGE = gql`\n    mutation sendMessage($to: String!, $content: String!) {\n        sendMessage(to: $to, content: $content) {\n            uuid from to content createdAt\n        }\n    }\n`\n\nexport default function InstructorMessages() {\n    // context for messages\n    const dispatch = useMessageDispatch()\n    const { users } = useMessageState()\n    const [content, setContent] = useState('')\n\n    // find selected user and their messages\n    const selected = users?.find(u => u.selected === true)\n    const messages = selected?.messages\n\n    // get existing messages from user, call query\n    const [getMessages, { loading: messagesLoading, data: messagesData}] = useLazyQuery(GET_MESSAGES)\n\n    // grab messages from selected user\n    useEffect(() => {\n        if (selected && !selected.messages) {\n            getMessages({ variables: { from: selected.username }})\n        }\n    }, [selected])\n\n    // if we got messages\n    useEffect(() => {\n        if (messagesData) {\n            dispatch({type: 'SET_USER_MESSAGES', payload: {\n                username: selected.username,\n                messages: messagesData.getMessages\n            }})\n        }\n    }, [messagesData])\n\n    // call mutation to send message, message will be retrived from context in StudentChat component\n    const [sendMessage] = useMutation(SEND_MESSAGE, {\n        onError: err => console.log(err)\n    })\n\n    // submit message form handler\n    const submitMessage = e => {\n        e.preventDefault()\n        setContent('')\n        // validation\n        if (content.trim() === '' || !selected) return\n\n        // mutation for sending the message\n        sendMessage({ variables: { to: selected.username, content }})\n    }\n\n    let selectedChatMarkup\n    if (messagesLoading){\n        selectedChatMarkup = <p className=\"default-info\"> Loading ... </p>\n    } else if (!messages && !messagesLoading) {\n        selectedChatMarkup = <p className=\"default-display\"> \n        Welcome to your chats page!  \n        <br/> <br/> Select a student from your matched list \n        <br/> on the left to start chatting! \n        <br/> <br/> We know you'll be a great TA. Happy TAing! </p>\n    } else if (messages.length > 0) {\n        selectedChatMarkup = messages.map((message, index) => (\n            <Fragment key={message.uuid} > \n                <Message message={message} instructor/>\n                {index === messages.length - 1 && (\n                    <div className=\"invisible\">\n                        <hr className=\"m-0\"/> \n                    </div>\n                )}\n            </Fragment>\n        ))\n    } else if (messages.length === 0) {\n        selectedChatMarkup = <p className=\"default-info\"> You are now connected! Reach out to your student! </p>\n    }\n    return (\n    <Col xs={10} md={8} className=\"p-0\">\n        <div className=\"messages-box d-flex flex-column-reverse p-3\">\n            {selectedChatMarkup}\n        </div>\n         <div className=\"pt-3 px-3 py-2\">\n            <Form onSubmit={submitMessage}> \n                    <Form.Group className=\"d-flex align-items-center m-1\">\n                        <Form.Control\n                            type=\"text\"\n                            className=\"rounded-pill bg-secondary border-0 msg-input p-4\"\n                            placeholder=\"Type a message...\"\n                            value={content}\n                            onChange={e => setContent(e.target.value)}/> \n                            <i className=\"fas fa-paper-plane fa-2x text-light ml-2\" role=\"button\" onClick={submitMessage}></i>\n                    </Form.Group>\n                </Form>\n        </div> \n    </Col>\n    )\n}\n","/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/student-app/StudentHome.js",[],"/Users/wchen/Documents/Projects/ta-hours-anywhere/client/src/pages/instructor-app/InstructorHome.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":56,"column":21,"nodeType":"129","messageId":"130","endLine":56,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":53,"column":8,"nodeType":"133","endLine":53,"endColumn":35,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"132","line":68,"column":8,"nodeType":"133","endLine":68,"endColumn":37,"suggestions":"135"},{"ruleId":"131","severity":1,"message":"136","line":49,"column":8,"nodeType":"133","endLine":49,"endColumn":18,"suggestions":"137"},{"ruleId":"131","severity":1,"message":"138","line":59,"column":8,"nodeType":"133","endLine":59,"endColumn":22,"suggestions":"139"},{"ruleId":"131","severity":1,"message":"132","line":53,"column":8,"nodeType":"133","endLine":53,"endColumn":35,"suggestions":"140"},{"ruleId":"131","severity":1,"message":"132","line":68,"column":8,"nodeType":"133","endLine":68,"endColumn":37,"suggestions":"141"},{"ruleId":"131","severity":1,"message":"136","line":51,"column":8,"nodeType":"133","endLine":51,"endColumn":18,"suggestions":"142"},{"ruleId":"131","severity":1,"message":"138","line":61,"column":8,"nodeType":"133","endLine":61,"endColumn":22,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["146"],["147"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selected.username'. Either include them or remove the dependency array.",["149"],["150"],["151"],["152"],["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"154","fix":"162"},{"desc":"156","fix":"163"},{"desc":"158","fix":"164"},{"desc":"160","fix":"165"},"Update the dependencies array to be: [messageError, messageData, user.username, dispatch]",{"range":"166","text":"167"},"Update the dependencies array to be: [reactionError, reactionData, user.username, dispatch]",{"range":"168","text":"169"},"Update the dependencies array to be: [getMessages, selected]",{"range":"170","text":"171"},"Update the dependencies array to be: [dispatch, messagesData, selected.username]",{"range":"172","text":"173"},{"range":"174","text":"167"},{"range":"175","text":"169"},{"range":"176","text":"171"},{"range":"177","text":"173"},[1476,1503],"[messageError, messageData, user.username, dispatch]",[1996,2025],"[reactionError, reactionData, user.username, dispatch]",[1539,1549],"[getMessages, selected]",[1817,1831],"[dispatch, messagesData, selected.username]",[1497,1524],[2017,2046],[1659,1669],[1937,1951]]